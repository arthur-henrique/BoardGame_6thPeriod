//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerControllers"",
            ""id"": ""95154a0c-2bf6-473e-974c-f09bcf2c7531"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""dc111daf-675d-4165-8aae-0cf576409e2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sideward"",
                    ""type"": ""Button"",
                    ""id"": ""979115d2-d57a-4ccd-9a87-e498b339bdca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""35078537-3df2-4ae4-9b1f-561f406f413a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a4cfcd6-a839-4721-b877-555c989a0519"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29af148a-eb3b-4cc1-9d47-b311e3c61c8d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sideward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48c088e5-52ed-4456-978e-514da575e029"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sideward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3fae1d5-81b4-499a-ac9e-c01ee7c5cdc3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControllers
        m_PlayerControllers = asset.FindActionMap("PlayerControllers", throwIfNotFound: true);
        m_PlayerControllers_Forward = m_PlayerControllers.FindAction("Forward", throwIfNotFound: true);
        m_PlayerControllers_Sideward = m_PlayerControllers.FindAction("Sideward", throwIfNotFound: true);
        m_PlayerControllers_Roll = m_PlayerControllers.FindAction("Roll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControllers
    private readonly InputActionMap m_PlayerControllers;
    private List<IPlayerControllersActions> m_PlayerControllersActionsCallbackInterfaces = new List<IPlayerControllersActions>();
    private readonly InputAction m_PlayerControllers_Forward;
    private readonly InputAction m_PlayerControllers_Sideward;
    private readonly InputAction m_PlayerControllers_Roll;
    public struct PlayerControllersActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerControllersActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_PlayerControllers_Forward;
        public InputAction @Sideward => m_Wrapper.m_PlayerControllers_Sideward;
        public InputAction @Roll => m_Wrapper.m_PlayerControllers_Roll;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControllers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllersActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControllersActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControllersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControllersActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Sideward.started += instance.OnSideward;
            @Sideward.performed += instance.OnSideward;
            @Sideward.canceled += instance.OnSideward;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IPlayerControllersActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Sideward.started -= instance.OnSideward;
            @Sideward.performed -= instance.OnSideward;
            @Sideward.canceled -= instance.OnSideward;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IPlayerControllersActions instance)
        {
            if (m_Wrapper.m_PlayerControllersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControllersActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControllersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControllersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControllersActions @PlayerControllers => new PlayerControllersActions(this);
    public interface IPlayerControllersActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnSideward(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
}
